// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package RelationshipDB

import (
	"context"
	"database/sql"
)

const addRelationship = `-- name: AddRelationship :execresult
INSERT INTO relationships (UserIdFrom, UserIdTo, Relationship)
VALUES 
(?, ?, ?)
`

type AddRelationshipParams struct {
	Useridfrom   int32
	Useridto     int32
	Relationship int32
}

func (q *Queries) AddRelationship(ctx context.Context, arg AddRelationshipParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addRelationship, arg.Useridfrom, arg.Useridto, arg.Relationship)
}

const getAllRelationshipsBetween2Users = `-- name: GetAllRelationshipsBetween2Users :many
SELECT useridfrom, useridto, relationship FROM relationships WHERE UserIdFrom=? AND UserIdTo=?
`

type GetAllRelationshipsBetween2UsersParams struct {
	Useridfrom int32
	Useridto   int32
}

func (q *Queries) GetAllRelationshipsBetween2Users(ctx context.Context, arg GetAllRelationshipsBetween2UsersParams) ([]Relationship, error) {
	rows, err := q.db.QueryContext(ctx, getAllRelationshipsBetween2Users, arg.Useridfrom, arg.Useridto)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Relationship
	for rows.Next() {
		var i Relationship
		if err := rows.Scan(&i.Useridfrom, &i.Useridto, &i.Relationship); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserFrom = `-- name: GetAllUserFrom :many
SELECT useridfrom, useridto, relationship FROM relationships WHERE UserIdTo=? AND Relationship=?
`

type GetAllUserFromParams struct {
	Useridto     int32
	Relationship int32
}

func (q *Queries) GetAllUserFrom(ctx context.Context, arg GetAllUserFromParams) ([]Relationship, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserFrom, arg.Useridto, arg.Relationship)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Relationship
	for rows.Next() {
		var i Relationship
		if err := rows.Scan(&i.Useridfrom, &i.Useridto, &i.Relationship); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserTo = `-- name: GetAllUserTo :many
SELECT useridfrom, useridto, relationship FROM relationships WHERE UserIdFrom=? AND Relationship=?
`

type GetAllUserToParams struct {
	Useridfrom   int32
	Relationship int32
}

func (q *Queries) GetAllUserTo(ctx context.Context, arg GetAllUserToParams) ([]Relationship, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserTo, arg.Useridfrom, arg.Relationship)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Relationship
	for rows.Next() {
		var i Relationship
		if err := rows.Scan(&i.Useridfrom, &i.Useridto, &i.Relationship); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRelationship = `-- name: RemoveRelationship :execresult
DELETE FROM relationships WHERE UserIdFrom=? AND UserIdTo=? AND Relationship=?
`

type RemoveRelationshipParams struct {
	Useridfrom   int32
	Useridto     int32
	Relationship int32
}

func (q *Queries) RemoveRelationship(ctx context.Context, arg RemoveRelationshipParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeRelationship, arg.Useridfrom, arg.Useridto, arg.Relationship)
}
