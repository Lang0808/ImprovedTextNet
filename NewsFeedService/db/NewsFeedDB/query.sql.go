// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package NewsFeedDB

import (
	"context"
	"database/sql"
)

const addNewsFeed = `-- name: AddNewsFeed :execresult
INSERT INTO NewsFeed (UserId, BlogId, Score)
VALUES
(?, ?, ?)
`

type AddNewsFeedParams struct {
	Userid int32
	Blogid int32
	Score  int32
}

func (q *Queries) AddNewsFeed(ctx context.Context, arg AddNewsFeedParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addNewsFeed, arg.Userid, arg.Blogid, arg.Score)
}

const getNewsFeed = `-- name: GetNewsFeed :many
SELECT userid, blogid, score FROM NewsFeed
WHERE UserId=?
ORDER BY Score DESC
LIMIT ? OFFSET ?
`

type GetNewsFeedParams struct {
	Userid int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetNewsFeed(ctx context.Context, arg GetNewsFeedParams) ([]Newsfeed, error) {
	rows, err := q.db.QueryContext(ctx, getNewsFeed, arg.Userid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Newsfeed
	for rows.Next() {
		var i Newsfeed
		if err := rows.Scan(&i.Userid, &i.Blogid, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
