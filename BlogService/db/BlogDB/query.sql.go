// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package BlogDB

import (
	"context"
	"database/sql"
)

const createBlog = `-- name: CreateBlog :execresult
INSERT INTO blogs (Title, Privacy,CreatedTime, UpdatedTime,Author, Content)
VALUES
(?, ?, ?, ?, ?, ?)
`

type CreateBlogParams struct {
	Title       string
	Privacy     int32
	Createdtime int64
	Updatedtime int64
	Author      int32
	Content     string
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBlog,
		arg.Title,
		arg.Privacy,
		arg.Createdtime,
		arg.Updatedtime,
		arg.Author,
		arg.Content,
	)
}

const getBlog = `-- name: GetBlog :one
SELECT id, title, privacy, createdtime, updatedtime, author, content FROM blogs
WHERE Id=?
`

func (q *Queries) GetBlog(ctx context.Context, id sql.NullInt32) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlog, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Privacy,
		&i.Createdtime,
		&i.Updatedtime,
		&i.Author,
		&i.Content,
	)
	return i, err
}

const getBlogsOfAuthor = `-- name: GetBlogsOfAuthor :many
SELECT id, title, privacy, createdtime, updatedtime, author, content FROM blogs
WHERE Author=? 
ORDER BY Id DESC
LIMIT ? OFFSET ?
`

type GetBlogsOfAuthorParams struct {
	Author int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetBlogsOfAuthor(ctx context.Context, arg GetBlogsOfAuthorParams) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getBlogsOfAuthor, arg.Author, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Privacy,
			&i.Createdtime,
			&i.Updatedtime,
			&i.Author,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
